{
    "version": "https://jsonfeed.org/version/1",
    "title": "你好 这里是Koo • All posts by \"unityeditor\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/04/05/Unity%E8%8A%82%E7%82%B9%E7%BC%96%E8%BE%91%E5%99%A8%E5%88%B6%E4%BD%9C%E7%9A%84%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/",
            "url": "http://example.com/2024/04/05/Unity%E8%8A%82%E7%82%B9%E7%BC%96%E8%BE%91%E5%99%A8%E5%88%B6%E4%BD%9C%E7%9A%84%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/",
            "title": "Unity节点编辑器制作的流程记录",
            "date_published": "2024-04-04T19:42:05.000Z",
            "content_html": "<h1 id=\"unity节点编辑器\"><a class=\"markdownIt-Anchor\" href=\"#unity节点编辑器\">#</a> Unity 节点编辑器</h1>\n<blockquote>\n<p>前言： 狂怒传说 项目中 因为想要做一个泛用的对话树 对话树还要被大行为树包起来？ 好好好  小小 NPC 必须好好捣鼓一下  这下好了 不得不手搓行为树了</p>\n</blockquote>\n<div class=\"img-item\" data-src=\"/2024/04/05/Unity%E8%8A%82%E7%82%B9%E7%BC%96%E8%BE%91%E5%99%A8%E5%88%B6%E4%BD%9C%E7%9A%84%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20240405034841452.png\" data-sub-html=\".caption\"><img src=\"/2024/04/05/Unity%E8%8A%82%E7%82%B9%E7%BC%96%E8%BE%91%E5%99%A8%E5%88%B6%E4%BD%9C%E7%9A%84%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20240405034841452.png\" class=\"\" title=\"image-20240405034841452\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">image-20240405034841452</span></div></div>\n<p>如何让 Assets 跟 Hierarchy 之间进行序列化的存储可难倒我了  这里 就要弄清楚 GameObject 在 Scene Assets 中的区别了</p>\n<p>考虑到效率 我打算先临时用一个 Hash 值来 表示数据 Data</p>\n<p>节点保存 int 的哈希值，然后每次选中节点的时候 根据哈希值和当前树的拥有者来通过 Linq 查找 List 集合中的数据 Data</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//****************** 代码文件申明 ************************</span></span><br><span class=\"line\"><span class=\"comment\">//* 文件：NodeDataInOwner                                       </span></span><br><span class=\"line\"><span class=\"comment\">//* 作者：Koo</span></span><br><span class=\"line\"><span class=\"comment\">//* 创建时间：2024/04/04 00:08:02 星期四</span></span><br><span class=\"line\"><span class=\"comment\">//* 功能：nothing</span></span><br><span class=\"line\"><span class=\"comment\">//*****************************************************</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> KooFrame;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine.Events;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SubSystem</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Serializable</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">NodeDataInOwner</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//public Dictionary&lt;string, MethodInfo&gt; methodsDic = new();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">SerializeField, HideInInspector</span>] <span class=\"keyword\">public</span> List&lt;<span class=\"built_in\">string</span>&gt; methodsTypeNames = <span class=\"keyword\">new</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">SerializeField</span>] <span class=\"keyword\">public</span> UnityEvent Event = <span class=\"keyword\">new</span> UnityEvent();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 运行时 会根据这个名字 对Event加委托监听</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">SerializeField</span>] <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CurRegisterMethodName;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">SerializeField</span>] <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> OwnerDataID;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">SerializeField</span>] <span class=\"keyword\">public</span> TreeOwner Owner;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">SerializeField</span>] <span class=\"keyword\">public</span> GameObject EventTrigger;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 绑定的Node</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">SerializeField</span>] <span class=\"keyword\">public</span> Node BindNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NodeDataInOwner</span>(<span class=\"params\">Node node, TreeOwner owner</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            BindNode = node;</span><br><span class=\"line\">            Owner = owner;</span><br><span class=\"line\">            OwnerDataID = Animator.StringToHash(owner.name +</span><br><span class=\"line\">                                                (owner.NodeDatas.Count)</span><br><span class=\"line\">                                                .ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">EventAddListener</span>(<span class=\"params\">MethodInfo methodInfo, Type invokeObj</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UnityAction methodDelegate = () =&gt;</span><br><span class=\"line\">                methodInfo.Invoke(</span><br><span class=\"line\">                    EventTrigger.GetComponent(invokeObj), <span class=\"literal\">null</span>);</span><br><span class=\"line\">            CurRegisterMethodName = invokeObj.FullName + <span class=\"string\">&quot;/&quot;</span> + methodInfo.Name;</span><br><span class=\"line\">            Event.AddListener(methodDelegate);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么接下来一个问题就出现了 我序列化了要触发方法的名字 这里我如何通过名字拿到方法的委托来用来注册到事件里面去呢。</p>\n<p>通过对象 和对象的 Component 名称 和当中的方法名称 在 OnEnable 的时候 反射拿到方法 并注册进事件当中</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">OnEnable</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//注册事件</span></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> nodeDataInOwner <span class=\"keyword\">in</span> NodeDatas)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span>[] typeAndmethod = nodeDataInOwner.CurRegisterMethodName.Split(<span class=\"string\">&quot;/&quot;</span>, StringSplitOptions.None);</span><br><span class=\"line\">                <span class=\"comment\">//得到方法</span></span><br><span class=\"line\">                Type type = nodeDataInOwner.EventTrigger.GetComponent(Type.GetType(typeAndmethod[<span class=\"number\">0</span>])).GetType();</span><br><span class=\"line\">                <span class=\"comment\">//获得所有方法 这里限制了方法必须是公共的 实例方法 而非静态或者字段</span></span><br><span class=\"line\">                MethodInfo[] methods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance);</span><br><span class=\"line\">                MethodInfo method = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> methodInfo <span class=\"keyword\">in</span> methods)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果是Void返回值 并且无参 名称相同</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (methodInfo.ReturnType == <span class=\"keyword\">typeof</span>(<span class=\"keyword\">void</span>) &amp;&amp; methodInfo.GetParameters().Length == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">                        methodInfo.Name == typeAndmethod[<span class=\"number\">1</span>])</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        method = methodInfo;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                UnityAction action = () =&gt;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (method != <span class=\"literal\">null</span>) method.Invoke(nodeDataInOwner.EventTrigger.GetComponent(type), <span class=\"literal\">null</span>);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodeDataInOwner.Event.AddListener(action);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>这里的流程应该还能优化一些 让 OnEnable 可以执行的更快</p>\n<p>0406</p>\n<p>今天制作节点编辑器遇到了很多困难 比较触碰到了那个实验性的基类的属性 而且又是我知识盲区。</p>\n<p>第一个是 节点没办法根据鼠标位置来创建</p>\n<p>​\t第一个完全是坐标系的转换很出问题  就仿佛是之前在 Scene 窗口 右键移动 GO 一样</p>\n<p>转换不同坐标系是很麻烦的一件事</p>\n<p>第二个则是 节点的复制和黏贴</p>\n<p>这里则是 Node 的数据层没有很好的剥离开来。导致需要序列化的时候。 没办法转换成能方便复制黏贴的 json 格式。</p>\n<p>这里我想只有两种解决办法</p>\n<ol>\n<li>自己定义 string 化的格式和内容，只抽离出必要的数据。来完成复制和黏贴</li>\n<li>新写出可序列化的数据类 NodeModel，复制的时候 json 化 Model 类 同理 黏贴的时候反序列化一下</li>\n</ol>\n<p>不过我也在油管上找到了合适的教程 ，可是 demo 时间紧任务重 。 果然还是先快点完成比较好。</p>\n",
            "tags": [
                "UnityEditor"
            ]
        }
    ]
}