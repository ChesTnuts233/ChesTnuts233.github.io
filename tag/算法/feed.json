{
    "version": "https://jsonfeed.org/version/1",
    "title": "你好 这里是Koo • All posts by \"算法\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/04/19/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "http://example.com/2024/04/19/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "算法笔记-反转字符串",
            "date_published": "2024-04-19T04:55:55.000Z",
            "content_html": "<h1 id=\"反转字符串\"><a class=\"markdownIt-Anchor\" href=\"#反转字符串\">#</a> 反转字符串</h1>\n<blockquote>\n<p>随笔 ： 这题确实比较简单了  用双指针就能轻松写出</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目：</h3>\n<blockquote>\n<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组  <code>s</code>  的形式给出。</p>\n<p>不要给另外的数组分配额外的空间，你必须 **<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\"> 原地</a>修改输入数组 **、使用 O (1) 的额外空间解决这一问题。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class=\"line\">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class=\"line\">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 105</code></li>\n<li><code>s[i]</code>  都是 <a href=\"https://baike.baidu.com/item/ASCII\">ASCII</a> 码表中的可打印字符</li>\n</ul>\n</blockquote>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ReverseString</span>(<span class=\"params\"><span class=\"built_in\">char</span>[] s</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> right = s.Length <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">char</span> temp = s[left];</span><br><span class=\"line\">            s[left] = s[right];</span><br><span class=\"line\">            s[right] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"题目进阶\"><a class=\"markdownIt-Anchor\" href=\"#题目进阶\">#</a> 题目进阶</h3>\n<blockquote>\n<p>给定一个字符串  <code>s</code>  和一个整数  <code>k</code> ，从字符串开头算起，每计数至  <code>2k</code>  个字符，就反转这  <code>2k</code>  字符中的前  <code>k</code>  个字符。</p>\n<ul>\n<li>如果剩余字符少于  <code>k</code>  个，则将剩余字符全部反转。</li>\n<li>如果剩余字符小于  <code>2k</code>  但大于或等于  <code>k</code>  个，则反转前  <code>k</code>  个字符，其余字符保持原样。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class=\"line\">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;abcd&quot;, k = 2</span><br><span class=\"line\">输出：&quot;bacd&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 104</code></li>\n<li><code>s</code>  仅由小写英文组成</li>\n<li><code>1 &lt;= k &lt;= 104</code></li>\n</ul>\n</blockquote>\n<p>进阶版本 我在模拟过程的时候 确实忽略了 for 循环中 计数器可以直接 + 2 * k 来进行区间跳跃</p>\n<p>导致写出来的判断比较复杂</p>\n<h2 id=\"题解-2\"><a class=\"markdownIt-Anchor\" href=\"#题解-2\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ReverseStr</span>(<span class=\"params\"><span class=\"built_in\">string</span> s, <span class=\"built_in\">int</span> k</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">char</span>[] result = s.ToCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; s.Length; i += <span class=\"number\">2</span> * k) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> start = i;</span><br><span class=\"line\">            <span class=\"comment\">//这里巧妙的使用Min函数 来确保取到的末尾要么是全部反转 要么是反转前面k部分</span></span><br><span class=\"line\">            <span class=\"built_in\">int</span> end = Math.Min(i + k - <span class=\"number\">1</span>, s.Length - <span class=\"number\">1</span>); </span><br><span class=\"line\">            ReverseString(result, start, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ReverseString</span>(<span class=\"params\"><span class=\"built_in\">char</span>[] s, <span class=\"built_in\">int</span> start, <span class=\"built_in\">int</span> end</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">char</span> temp = s[start];</span><br><span class=\"line\">            s[start] = s[end];</span><br><span class=\"line\">            s[end] = temp;</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>C++ ：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">reverseStr</span><span class=\"params\">(string s, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i += (<span class=\"number\">2</span> * k)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 每隔 2k 个字符的前 k 个字符进行反转</span></span><br><span class=\"line\">            <span class=\"comment\">// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + k &lt;= s.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>() + i, s.<span class=\"built_in\">begin</span>() + i + k );</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3. 剩余字符少于 k 个，则将剩余字符全部反转。</span></span><br><span class=\"line\">                <span class=\"built_in\">reverse</span>(s.<span class=\"built_in\">begin</span>() + i, s.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/19/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "url": "http://example.com/2024/04/19/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "title": "算法笔记-四数之和",
            "date_published": "2024-04-18T16:10:49.000Z",
            "content_html": "<h1 id=\"四数之和\"><a class=\"markdownIt-Anchor\" href=\"#四数之和\">#</a> 四数之和</h1>\n<blockquote>\n<p>随笔：四数之和相比三数之和 多了很多细节 比如要多套一层循环 去重复的时候 要 while 遍历 防止没有去除干净 此外 还要考虑 如  target 是任意值。比如：数组是 <code>[-4, -3, -2, -1]</code> ， <code>target</code>  是 <code>-10</code> ，不能因为 <code>-4 &gt; -10</code>  而跳过</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给你一个由  <code>n</code>  个整数组成的数组  <code>nums</code>  ，和一个目标值  <code>target</code>  。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组  <code>[nums[a], nums[b], nums[c], nums[d]]</code>  （若两个四元组元素一一对应，则认为两个四元组重复）：</p>\n<ul>\n<li><code>0 &lt;= a, b, c, d &lt; n</code></li>\n<li><code>a</code> 、 <code>b</code> 、 <code>c</code>  和  <code>d</code>  <strong>互不相同</strong></li>\n<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>\n</ul>\n<p>你可以按 <strong>任意顺序</strong> 返回答案 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class=\"line\">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,2,2,2,2], target = 8</span><br><span class=\"line\">输出：[[2,2,2,2]]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n<li><code>-109 &lt;= target &lt;= 109</code></li>\n</ul>\n</blockquote>\n<h1 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h1>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IList&lt;IList&lt;<span class=\"built_in\">int</span>&gt;&gt; FourSum(<span class=\"built_in\">int</span>[] nums, <span class=\"built_in\">int</span> target) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        IList&lt;IList&lt;<span class=\"built_in\">int</span>&gt;&gt; result = <span class=\"keyword\">new</span> List&lt;IList&lt;<span class=\"built_in\">int</span>&gt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//先对nums进行排序</span></span><br><span class=\"line\">        Array.Sort(nums);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.Length;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//剪枝处理   target是任意值。比如：数组是[-4, -3, -2, -1]，target是-10，不能因为-4 &gt; -10而跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; target &amp;&amp; nums[i] &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            \t<span class=\"keyword\">break</span>; <span class=\"comment\">// 这里使用break，统一通过最后的return返回</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//这里从i+1开始 因为是二重遍历 i在上面已经走完了</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j= i+<span class=\"number\">1</span>;j&lt;nums.Length;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[j] + nums[i] &gt; target &amp;&amp; nums[j] + nums[i] &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//去除重复</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;i+<span class=\"number\">1</span> &amp;&amp; nums[j] == nums[j<span class=\"number\">-1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> left = j+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> right = nums.Length <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(left &lt; right)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//判定</span></span><br><span class=\"line\">                    <span class=\"built_in\">int</span> sum = nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(sum &lt; target)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        left++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum &gt; target)&#123;</span><br><span class=\"line\">                        right--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        result.Add(<span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;&#123;nums[i],nums[j],nums[left],nums[right]&#125;);</span><br><span class=\"line\">                        <span class=\"comment\">//去除重复 这里去重要重复遍历 因为多套了一层循环</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left+<span class=\"number\">1</span>])</span><br><span class=\"line\">                            left++;</span><br><span class=\"line\">                        <span class=\"keyword\">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right<span class=\"number\">-1</span>])</span><br><span class=\"line\">                            right--;</span><br><span class=\"line\"></span><br><span class=\"line\">                        left++;</span><br><span class=\"line\">                        right--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这类题目对于双指针法的锻炼还是挺有效果的，在实际项目中，可以理解 如何将复杂度 n^2 的算法 降低一层</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/18/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "url": "http://example.com/2024/04/18/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "title": "算法笔记-三数之和",
            "date_published": "2024-04-18T11:28:16.000Z",
            "content_html": "<h1 id=\"三数之和\"><a class=\"markdownIt-Anchor\" href=\"#三数之和\">#</a> 三数之和</h1>\n<blockquote>\n<p>随笔：这题关键在于了解去重的细节</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给你一个整数数组  <code>nums</code>  ，判断是否存在三元组  <code>[nums[i], nums[j], nums[k]]</code>  满足  <code>i != j</code> 、 <code>i != k</code>  且  <code>j != k</code>  ，同时还满足  <code>nums[i] + nums[j] + nums[k] == 0</code>  。请</p>\n<p>你返回所有和为  <code>0</code>  且不重复的三元组。</p>\n<p>** 注意：** 答案中不可以包含重复的三元组。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;输入：nums = [-1,0,1,2,-1,-4]</span><br><span class=\"line\">&gt;输出：[[-1,-1,2],[-1,0,1]]</span><br><span class=\"line\">&gt;解释：</span><br><span class=\"line\">&gt;nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class=\"line\">&gt;nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class=\"line\">&gt;nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class=\"line\">&gt;不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class=\"line\">&gt;注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;输入：nums = [0,1,1]</span><br><span class=\"line\">&gt;输出：[]</span><br><span class=\"line\">&gt;解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;输入：nums = [0,0,0]</span><br><span class=\"line\">&gt;输出：[[0,0,0]]</span><br><span class=\"line\">&gt;解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n</blockquote>\n<p>思路和细节</p>\n<p>如何移动 left 和 right 呢， 如果 nums [i] + nums [left] + nums [right] &gt; 0 就说明 此时三数之和大了，因为数组是排序后了，所以 right 下标就应该向左移动，这样才能让三数之和小一些。</p>\n<p>如果 nums [i] + nums [left] + nums [right] &lt; 0 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到 left 与 right 相遇为止。</p>\n<p>动画</p>\n<p><div class=\"img-item\" data-src=\"https://code-thinking.cdn.bcebos.com/gifs/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.gif\" data-sub-html=\".caption\"><img src=\"https://code-thinking.cdn.bcebos.com/gifs/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.gif\" alt=\"15.三数之和\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">15.三数之和</span></div></div></p>\n<p>第一步要先对 nums 进行一遍排序</p>\n<p>去重细节</p>\n<p>在 i 已经固定确定的时候</p>\n<p>判断 nums [i] == nums [i-1];</p>\n<p>为什么判断是 i-1 而不是 i+1; 因为 i+1 可能会 比如 -1 -1 2 这样的结果集 给 contine 所以 我从上一个进行判断 上一个如果重复了</p>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IList&lt;IList&lt;<span class=\"built_in\">int</span>&gt;&gt; ThreeSum(<span class=\"built_in\">int</span>[] nums)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            IList&lt;IList&lt;<span class=\"built_in\">int</span>&gt;&gt; result = <span class=\"keyword\">new</span> List&lt;IList&lt;<span class=\"built_in\">int</span>&gt;&gt;(); <span class=\"comment\">//定义结果</span></span><br><span class=\"line\">            <span class=\"comment\">//先对nums进行排序</span></span><br><span class=\"line\">            Array.Sort(nums);</span><br><span class=\"line\">            <span class=\"comment\">//循环nums</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.Length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果这里的结果就大于0  那就不会有三元组 a b c和为0</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//对a进行去重  //不用i+1 防止跳过特殊情况</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//定义左右指针</span></span><br><span class=\"line\">                <span class=\"built_in\">int</span> left = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> right = nums.Length - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (left &lt; right)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//定义结果</span></span><br><span class=\"line\">                    <span class=\"built_in\">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">0</span>) <span class=\"comment\">//结果小了 left右移</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        left++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        right--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"comment\">//为0 的情况 </span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        result.Add(<span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt; &#123; nums[i], nums[left], nums[right] &#125;);</span><br><span class=\"line\">                        <span class=\"comment\">//进行去重</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (left &lt; right &amp;&amp; nums[left] == nums[left+<span class=\"number\">1</span>])  <span class=\"comment\">//这里不能left++</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            left++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left &lt; right &amp;&amp; nums[right] == nums[right<span class=\"number\">-1</span>])  </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            right--;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//找到答案 双指针收缩</span></span><br><span class=\"line\">                    left++;</span><br><span class=\"line\">                    right--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>细节还是比较多的。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/18/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%B5%8E%E9%87%91%E4%BF%A1/",
            "url": "http://example.com/2024/04/18/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%B5%8E%E9%87%91%E4%BF%A1/",
            "title": "算法笔记-赎金信",
            "date_published": "2024-04-18T06:47:33.000Z",
            "content_html": "<h1 id=\"赎金信\"><a class=\"markdownIt-Anchor\" href=\"#赎金信\">#</a> 赎金信</h1>\n<blockquote>\n<p>随笔 ： 赎金信 Ransom Note  赎金信通常指的是绑架者用来向受害者传达要求的信件，通常是由字母、数字和标点符号组成的短文本，用来表达要求支付赎金或其他要求。</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给你两个字符串： <code>ransomNote</code>  和  <code>magazine</code>  ，判断  <code>ransomNote</code>  能不能由  <code>magazine</code>  里面的字符构成。</p>\n<p>如果可以，返回  <code>true</code>  ；否则返回  <code>false</code>  。</p>\n<p><code>magazine</code>  中的每个字符只能在  <code>ransomNote</code>  中使用一次。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li>\n<li><code>ransomNote</code>  和  <code>magazine</code>  由小写英文字母组成</li>\n</ul>\n</blockquote>\n<p>这是一道简单题 做起来还是比较顺的</p>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">CanConstruct</span>(<span class=\"params\"><span class=\"built_in\">string</span> ransomNote, <span class=\"built_in\">string</span> magazine</span>)</span> &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">char</span>,<span class=\"built_in\">int</span>&gt; ransom2ShowDic = <span class=\"keyword\">new</span>(); <span class=\"comment\">//ransom中字符出现的次数</span></span><br><span class=\"line\">        <span class=\"built_in\">char</span>[] ransomChars = ransomNote.ToCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"built_in\">char</span> word <span class=\"keyword\">in</span> ransomChars)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!ransom2ShowDic.TryAdd(word,<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                ransom2ShowDic[word]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历magazine 如果出现相同字符就减 C#可以直接遍历字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"built_in\">char</span> word <span class=\"keyword\">in</span> magazine)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ransom2ShowDic.ContainsKey(word))&#123;</span><br><span class=\"line\">                ransom2ShowDic[word]--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查所有字符的出现次数是否都小于等于0</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> showTime <span class=\"keyword\">in</span> ransom2ShowDic.Values) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (showTime &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 只要有一个字符的出现次数大于0，就返回false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/18/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II/",
            "url": "http://example.com/2024/04/18/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II/",
            "title": "算法笔记-四数相加II",
            "date_published": "2024-04-18T06:23:31.000Z",
            "content_html": "<h1 id=\"四数相加ii\"><a class=\"markdownIt-Anchor\" href=\"#四数相加ii\">#</a> 四数相加 II</h1>\n<blockquote>\n<p>随笔： 这题做的时候，还是犯我读书时候的老错误了，粗心大意，错在不该错的地方</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目：</h3>\n<blockquote>\n<p>给你四个整数数组  <code>nums1</code> 、 <code>nums2</code> 、 <code>nums3</code>  和  <code>nums4</code>  ，数组长度都是  <code>n</code>  ，请你计算有多少个元组  <code>(i, j, k, l)</code>  能满足：</p>\n<ul>\n<li><code>0 &lt;= i, j, k, l &lt; n</code></li>\n<li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：</span><br><span class=\"line\">两个元组如下：</span><br><span class=\"line\">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class=\"line\">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>n == nums1.length</code></li>\n<li><code>n == nums2.length</code></li>\n<li><code>n == nums3.length</code></li>\n<li><code>n == nums4.length</code></li>\n<li><code>1 &lt;= n &lt;= 200</code></li>\n<li><code>-228 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 228</code></li>\n</ul>\n</blockquote>\n<p>这道题目的关键在于 决定哈希表里面 Key 和 Value 的关系</p>\n<p>我一开始想着存 0-n 的索引 index 和 nums1 2 和 Sum 之间的关系 发现没有必要</p>\n<p>看完题解后明白 判断重复出现的时候 必须 Key Value 有一方为  <code>出现次数</code>  这点很重要</p>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">FourSumCount</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums1, <span class=\"built_in\">int</span>[] nums2, <span class=\"built_in\">int</span>[] nums3, <span class=\"built_in\">int</span>[] nums4</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> n;</span><br><span class=\"line\">        n = nums1.Length;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>&gt; sum12Dic = <span class=\"keyword\">new</span>();  <span class=\"comment\">// nums1和nums2的和  出现次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i= <span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j= <span class=\"number\">0</span> ;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> sum = nums1[i] + nums2[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sum12Dic.ContainsKey(sum))&#123;</span><br><span class=\"line\">                    sum12Dic[sum]++;  </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    sum12Dic[sum] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i= <span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j= <span class=\"number\">0</span> ;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> sum = nums3[i]+nums4[j];</span><br><span class=\"line\">                <span class=\"comment\">//遍历字典</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sum12Dic.TryGetValue(-sum,<span class=\"keyword\">out</span> <span class=\"built_in\">int</span> <span class=\"keyword\">value</span>))&#123;</span><br><span class=\"line\">                     result += <span class=\"keyword\">value</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"标答\"><a class=\"markdownIt-Anchor\" href=\"#标答\">#</a> 标答</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">FourSumCount</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums1, <span class=\"built_in\">int</span>[] nums2, <span class=\"built_in\">int</span>[] nums3, <span class=\"built_in\">int</span>[] nums4</span>)</span> &#123;</span><br><span class=\"line\">       Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt; dic = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> nums1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> j <span class=\"keyword\">in</span> nums2)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> sum = i + j;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dic.ContainsKey(sum))&#123;</span><br><span class=\"line\">                    dic[sum]++;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dic.Add(sum, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> a <span class=\"keyword\">in</span> nums3)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> b <span class=\"keyword\">in</span> nums4)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> sum = a+b;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dic.TryGetValue(-sum, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> result))&#123;</span><br><span class=\"line\">                    res += result;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>C++:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fourSumCount</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; A, vector&lt;<span class=\"type\">int</span>&gt;&amp; B, vector&lt;<span class=\"type\">int</span>&gt;&amp; C, vector&lt;<span class=\"type\">int</span>&gt;&amp; D)</span> </span>&#123;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; umap; <span class=\"comment\">//key:a+b的数值，value:a+b数值出现的次数</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> a : A) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> b : B) &#123;</span><br><span class=\"line\">                umap[a + b]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> count = <span class=\"number\">0</span>; <span class=\"comment\">// 统计a+b+c+d = 0 出现的次数</span></span><br><span class=\"line\">        <span class=\"comment\">// 在遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就把map中key对应的value也就是出现次数统计出来。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c : C) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> d : D) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (umap.<span class=\"built_in\">find</span>(<span class=\"number\">0</span> - (c + d)) != umap.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                    count += umap[<span class=\"number\">0</span> - (c + d)];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/16/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "url": "http://example.com/2024/04/16/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "title": "算法笔记-两数之和",
            "date_published": "2024-04-16T14:11:05.000Z",
            "content_html": "<h1 id=\"两数之和\"><a class=\"markdownIt-Anchor\" href=\"#两数之和\">#</a> 两数之和</h1>\n<blockquote>\n<p>随笔：今天 cs2 直接 C + 掉 C 了 为了冲回 C+ 叫来两个 B 好家伙 队友打完成 C + 了 。。。。。</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给定一个整数数组  <code>nums</code>  和一个整数目标值  <code>target</code> ，请你在该数组中找出 <strong>和为目标值</strong> <em> <code>target</code> </em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,7,11,15], target = 9</span><br><span class=\"line\">输出：[0,1]</span><br><span class=\"line\">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,2,4], target = 6</span><br><span class=\"line\">输出：[1,2]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,3], target = 6</span><br><span class=\"line\">输出：[0,1]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n<li><code>-109 &lt;= target &lt;= 109</code></li>\n<li><strong>只会存在一个有效答案</strong></li>\n</ul>\n<p>** 进阶：** 你可以想出一个时间复杂度小于  <code>O(n2)</code>  的算法吗？给定一个整数数组  <code>nums</code>  和一个整数目标值  <code>target</code> ，请你在该数组中找出 <strong>和为目标值</strong> <em> <code>target</code> </em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,7,11,15], target = 9</span><br><span class=\"line\">输出：[0,1]</span><br><span class=\"line\">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,2,4], target = 6</span><br><span class=\"line\">输出：[1,2]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,3], target = 6</span><br><span class=\"line\">输出：[0,1]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n<li><code>-109 &lt;= target &lt;= 109</code></li>\n<li><strong>只会存在一个有效答案</strong></li>\n</ul>\n<p>** 进阶：** 你可以想出一个时间复杂度小于  <code>O(n2)</code>  的算法吗？</p>\n</blockquote>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</span></span><br><span class=\"line\"><span class=\"comment\">// 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</span></span><br><span class=\"line\"><span class=\"comment\">// 你可以按任意顺序返回答案。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 使用哈希表的方法</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;nums&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;target&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span>[] <span class=\"title\">GetTwoSum1</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums, <span class=\"built_in\">int</span> target</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>&gt; keyValuePairs = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.Length; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (keyValuePairs.ContainsKey(target - nums[i]))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[] &#123; keyValuePairs[target - nums[i]], i &#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tkeyValuePairs[nums[i]] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> O(N^2)方法</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;nums&quot;&gt;</span>数列数组<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;target&quot;&gt;</span>两数之和<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span>[] <span class=\"title\">GetTwoSum2</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums, <span class=\"built_in\">int</span> target</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.Length; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> j = i + <span class=\"number\">1</span>; j &lt; nums.Length; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[i] + nums[j] == target)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tresult[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">\t\t\t\tresult[<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/16/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%BF%AB%E4%B9%90%E6%95%B0/",
            "url": "http://example.com/2024/04/16/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%BF%AB%E4%B9%90%E6%95%B0/",
            "title": "算法笔记-快乐数",
            "date_published": "2024-04-16T12:50:53.000Z",
            "content_html": "<blockquote>\n<p>随谈： 这题难点在于 判断数是否重复 和如何反复判断</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>编写一个算法来判断一个数  <code>n</code>  是不是快乐数。</p>\n<p><strong>「快乐数」</strong> 定义为：</p>\n<ul>\n<li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li>\n<li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li>\n<li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li>\n</ul>\n<p>如果  <code>n</code>  是 <em>快乐数</em> 就返回  <code>true</code>  ；不是，则返回  <code>false</code>  。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 19</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：</span><br><span class=\"line\">12 + 92 = 82</span><br><span class=\"line\">82 + 22 = 68</span><br><span class=\"line\">62 + 82 = 100</span><br><span class=\"line\">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 2</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 231 - 1</code></li>\n</ul>\n</blockquote>\n<p>这题我出问题的地方 简单一句话就是 忘记把 n 在循环中再设置成 numSum 了</p>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsHappy</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//求和的数进字典</span></span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>&gt; SumDic = <span class=\"keyword\">new</span>(); </span><br><span class=\"line\">        <span class=\"comment\">//拆分当前数 先得到当前数字的位数 可以ToString后 根据字符串来拆</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> numDigit = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> numSum = <span class=\"number\">0</span>;    </span><br><span class=\"line\">            <span class=\"built_in\">char</span>[] numChars =  n.ToString().ToCharArray();</span><br><span class=\"line\">            numDigit = numChars.Length;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i=<span class=\"number\">0</span>;i&lt;numDigit;i++)&#123;</span><br><span class=\"line\">                numSum += <span class=\"built_in\">int</span>.Parse(numChars[i].ToString()) * <span class=\"built_in\">int</span>.Parse(numChars[i].ToString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"comment\">//加进字典中 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(SumDic.TryAdd(numSum,<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//能加进字典 说明不重复 判断一下Sum是否是1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(numSum==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//更新一下n的值啊 不然循环每次都一样？</span></span><br><span class=\"line\">                n = numSum;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//不能加进字典 重复 </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(numSum == <span class=\"number\">1</span>)&#123; <span class=\"comment\">//快乐数</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/16/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%B8%A4%E6%95%B0%E7%BB%84%E4%BA%A4%E9%9B%86/",
            "url": "http://example.com/2024/04/16/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%B8%A4%E6%95%B0%E7%BB%84%E4%BA%A4%E9%9B%86/",
            "title": "算法笔记-两数组交集",
            "date_published": "2024-04-16T11:29:04.000Z",
            "content_html": "<blockquote>\n<p>随谈：前言越来越想是随谈了 ，所以之后就改叫随谈算了，因为项目要赶着交 Demo，所以我这礼拜就一直忙着先弄项目那边了。我现在认识到，自己有时候写东西还挺烦的，思路没理清就开始写，导致团队伙伴带来了很多麻烦，学算法 ，一是要锻炼自己的逻辑能力，二就是要让自己耐心。很多事情自己知道是有问题的，但忍不住问，这种其实是无效发言。会让别人觉得你自己很不细心和靠谱。所以向别人提问之前，先三思一下。做完之后，以防万一再向别人确认。</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目：</h3>\n<blockquote>\n<p>给定两个数组  <code>nums1</code>  和  <code>nums2</code>  ，返回 <em>它们的</em></p>\n<p><em>交集</em></p>\n<p>。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class=\"line\">输出：[2]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class=\"line\">输出：[9,4]</span><br><span class=\"line\">解释：[4,9] 也是可通过的</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n</blockquote>\n<p>这题就是考哈希表了。所以直接给出答案</p>\n<p>这里贴一下我以前的算法解答</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Intersect</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> 使用哈希表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span>[] <span class=\"title\">GetIntersect2</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums1, <span class=\"built_in\">int</span>[] nums2</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums1.Length &gt; nums2.Length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GetIntersect2(nums2, nums1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt; map = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> num <span class=\"keyword\">in</span> nums1) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> count = map.GetValueOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            map[num] = count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] intersection = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[nums1.Length];</span><br><span class=\"line\">        <span class=\"built_in\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> num <span class=\"keyword\">in</span> nums2) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> count = map.GetValueOrDefault(num, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                intersection[index++] = num;</span><br><span class=\"line\">                count--;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    map[num] = count;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map.Remove(num);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> intersection.Take(index).ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> 使用Linq的方案</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GetIntersect1</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] array1, <span class=\"built_in\">int</span>[] array2</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> intersection = array1</span><br><span class=\"line\">            .GroupBy(x =&gt; x) <span class=\"comment\">// 对数组1中的元素进行分组</span></span><br><span class=\"line\">            .Join(array2</span><br><span class=\"line\">                    .GroupBy(y =&gt; y), <span class=\"comment\">// 对数组2中的元素进行分组</span></span><br><span class=\"line\">                x =&gt; x.Key, <span class=\"comment\">// 使用数组1中的元素作为键</span></span><br><span class=\"line\">                y =&gt; y.Key, <span class=\"comment\">// 使用数组2中的元素作为键</span></span><br><span class=\"line\">                (x, y) =&gt; <span class=\"keyword\">new</span> &#123; Element = x.Key, Count = Math.Min(x.Count(), y.Count()) &#125; <span class=\"comment\">// 计算重复次数的最小值</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            .SelectMany(x =&gt; Enumerable.Repeat(x.Element, x.Count)) <span class=\"comment\">// 重复每个元素Count次</span></span><br><span class=\"line\">            .ToArray(); <span class=\"comment\">// 将结果转换为数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新的解答：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span>[] <span class=\"title\">Intersection</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums1, <span class=\"built_in\">int</span>[] nums2</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//用字典存储第一个数组的所有数字</span></span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>&gt; numDic = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">        List&lt;<span class=\"built_in\">int</span>&gt; resultList = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i= <span class=\"number\">0</span>;i&lt; nums1.Length;i++)&#123;</span><br><span class=\"line\">            numDic.TryAdd(nums1[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i= <span class=\"number\">0</span>;i&lt; nums2.Length;i++)</span><br><span class=\"line\">        &#123;    </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(numDic.TryGetValue(nums2[i],<span class=\"keyword\">out</span> <span class=\"built_in\">int</span> show))&#123;</span><br><span class=\"line\">                numDic[nums2[i]]++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(numDic[nums2[i]] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    resultList.Add(nums2[i]);</span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[resultList.Count];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i=<span class=\"number\">0</span>;i&lt;result.Length;i++)&#123;</span><br><span class=\"line\">            result[i] = resultList[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这题为简单题 。可以自己完全写出来 但不管写什么都先把思绪理清楚</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/10/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E6%9C%89%E6%95%88%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/",
            "url": "http://example.com/2024/04/10/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E6%9C%89%E6%95%88%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/",
            "title": "算法笔记-有效字母异位词",
            "date_published": "2024-04-09T17:36:39.000Z",
            "content_html": "<h1 id=\"有效字母异位词\"><a class=\"markdownIt-Anchor\" href=\"#有效字母异位词\">#</a> 有效字母异位词</h1>\n<blockquote>\n<p>前言： 简单题 字典类型 空间换时间 直接秒</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目：</h3>\n<blockquote>\n<p>给定两个字符串  <code>*s*</code>  和  <code>*t*</code>  ，编写一个函数来判断  <code>*t*</code>  是否是  <code>*s*</code>  的字母异位词。</p>\n<p>** 注意：** 若  <code>*s*</code>  和  <code>*t*</code>  中每个字符出现的次数都相同，则称  <code>*s*</code>  和  <code>*t*</code>  互为字母异位词。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure>\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li>\n<li><code>s</code>  和  <code>t</code>  仅包含小写字母</li>\n</ul>\n<p><strong>进阶:</strong> 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p>\n</blockquote>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAnagram</span>(<span class=\"params\"><span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t</span>)</span> &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">char</span>,<span class=\"built_in\">int</span>&gt; wordAndShowtime = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">        <span class=\"comment\">//把26个字母放进字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历26个字母，将它们与对应的数值放入字典中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">char</span> letter = <span class=\"string\">&#x27;a&#x27;</span>; letter &lt;= <span class=\"string\">&#x27;z&#x27;</span>; letter++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将字母与对应的数值放入字典中</span></span><br><span class=\"line\">            wordAndShowtime[letter] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i= <span class=\"number\">0</span>;i&lt;s.Length;i++)&#123;</span><br><span class=\"line\">            wordAndShowtime[s[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i= <span class=\"number\">0</span>;i&lt;t.Length;i++)&#123;</span><br><span class=\"line\">            wordAndShowtime[t[i]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> sum =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"built_in\">int</span> num <span class=\"keyword\">in</span> wordAndShowtime.Values)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我这里用了一个字典</p>\n<p>但如果是字符串包含 unicode 字符  那么就需要两个字典来记录两个字符串中出现的字符了</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAnagram</span>(<span class=\"params\"><span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化字符及其出现次数的字典</span></span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">char</span>, <span class=\"built_in\">int</span>&gt; charCountS = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">char</span>, <span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">char</span>, <span class=\"built_in\">int</span>&gt; charCountT = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">char</span>, <span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 统计字符串 s 中各字符的出现次数</span></span><br><span class=\"line\">        CountCharacters(s, charCountS);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 统计字符串 t 中各字符的出现次数</span></span><br><span class=\"line\">        CountCharacters(t, charCountT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比较两个字典中字符出现次数是否一致</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> AreDictionariesEqual(charCountS, charCountT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CountCharacters</span>(<span class=\"params\"><span class=\"built_in\">string</span> str, Dictionary&lt;<span class=\"built_in\">char</span>, <span class=\"built_in\">int</span>&gt; charCount</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"built_in\">char</span> c <span class=\"keyword\">in</span> str) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (charCount.ContainsKey(c)) &#123;</span><br><span class=\"line\">                charCount[c]++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                charCount[c] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> <span class=\"title\">AreDictionariesEqual</span>(<span class=\"params\">Dictionary&lt;<span class=\"built_in\">char</span>, <span class=\"built_in\">int</span>&gt; dict1, Dictionary&lt;<span class=\"built_in\">char</span>, <span class=\"built_in\">int</span>&gt; dict2</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dict1.Count != dict2.Count) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> dict1) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">char</span> key = kvp.Key;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> value1 = kvp.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!dict2.ContainsKey(key) || dict2[key] != value1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字典需要的空间还是挺大的</p>\n<p>代码随想录中提供了数组版本</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAnagram</span>(<span class=\"params\"><span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t</span>)</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">int</span> sl=s.Length,tl=t.Length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sl!=tl) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">     <span class=\"comment\">// 并不需要记住字符a的ASCII，只要求出一个相对数值就可以了</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; sl; i++)&#123;</span><br><span class=\"line\">             a[s[i] - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">             a[t[i] - <span class=\"string\">&#x27;a&#x27;</span>]--;</span><br><span class=\"line\">        &#125;       </span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> i <span class=\"keyword\">in</span> a)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// record数组如果有的元素不为零0，说明字符串s和t 一定是谁多了字符或者谁少了字符。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>好了 今晚早点休息 肚子痛。。。。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E7%9B%B8%E9%82%BB%E8%8A%82%E7%82%B9/",
            "url": "http://example.com/2024/04/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E7%9B%B8%E9%82%BB%E8%8A%82%E7%82%B9/",
            "title": "算法笔记-两两交换链表相邻节点",
            "date_published": "2024-04-08T17:13:53.000Z",
            "content_html": "<h1 id=\"两两交换链表相邻节点\"><a class=\"markdownIt-Anchor\" href=\"#两两交换链表相邻节点\">#</a> 两两交换链表相邻节点</h1>\n<blockquote>\n<p>前言： 两两交换这个模拟过程 我总是不知道 我是要定义 pre 和 cur 还是 cur 和 next 指针  可能两种方式都可以 但如果定义了虚拟头结点 dummy（我习惯写成 StartHead 了）那可能前者更好 因为 next 这个临时节点 可以在 while 里面（伴随判断定义）</p>\n</blockquote>\n<h3 id=\"题目-中等\"><a class=\"markdownIt-Anchor\" href=\"#题目-中等\">#</a> 题目 (中等)</h3>\n<blockquote>\n<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>\n<p><strong>示例 1：</strong></p>\n<p><div class=\"img-item\" data-src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" data-sub-html=\".caption\"><img src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" alt=\"img\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">img</span></div></div></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,3,4]</span><br><span class=\"line\">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = []</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1]</span><br><span class=\"line\">输出：[1]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目在范围  <code>[0, 100]</code>  内</li>\n<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</blockquote>\n<p>先看看我的垃圾错误解答吧。。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">SwapPairs</span>(<span class=\"params\">ListNode head</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//虚拟头节点 </span></span><br><span class=\"line\">        ListNode startHead = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">        startHead.next = head;</span><br><span class=\"line\">        ListNode cur = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">        ListNode next = <span class=\"keyword\">new</span>();    定义了太多没用的变量 混乱 要想清楚再写啊。。。</span><br><span class=\"line\">        ListNode temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        cur = head;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//如果为空链表 或者 就一个头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == <span class=\"literal\">null</span> || cur.next == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cur;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            next = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这里 cur.next 为头节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(next != <span class=\"literal\">null</span>) 我这里的判断情况就漏掉了奇数的情况 链表长度为奇数的时候 这里就会报错  </span><br><span class=\"line\">        <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>   -》  <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">4</span> <span class=\"number\">3</span> <span class=\"number\">5</span> ，，，</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//第一次交换  评价： (其实如果while 里有这种判断 感觉就已经gg了)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(startHead.next == cur)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                startHead.next = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            temp = next.next; <span class=\"comment\">//先保存一下后面节点的next</span></span><br><span class=\"line\">            next.next = cur;</span><br><span class=\"line\">            cur.next = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> startHead.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next = temp.next; <span class=\"comment\">//如果空了 直接</span></span><br><span class=\"line\"></span><br><span class=\"line\">            cur = cur.next; <span class=\"comment\">//这里也没正确更新？</span></span><br><span class=\"line\">            next = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> startHead.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>修正过后</p>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.next = next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">SwapPairs</span>(<span class=\"params\">ListNode head</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果为空链表 或者 就一个头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//虚拟头节点</span></span><br><span class=\"line\">        ListNode startHead = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">        startHead.next = head;</span><br><span class=\"line\">        ListNode cur = head;</span><br><span class=\"line\">        ListNode pre = startHead;</span><br><span class=\"line\">        <span class=\"comment\">//这里 cur.next 为头节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">null</span> &amp;&amp; cur.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ListNode nextNode = cur.next;</span><br><span class=\"line\">            ListNode temp = nextNode.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            pre.next = nextNode;</span><br><span class=\"line\">            nextNode.next = cur;</span><br><span class=\"line\">            cur.next = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> startHead.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "url": "http://example.com/2024/04/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "title": "算法笔记-翻转链表",
            "date_published": "2024-04-08T16:13:34.000Z",
            "content_html": "<h1 id=\"翻转链表\"><a class=\"markdownIt-Anchor\" href=\"#翻转链表\">#</a> 翻转链表</h1>\n<blockquote>\n<p>前言：这题算是简单 双指针就能解决 这题倒是让我想起今天写节点编辑器的问题 策划要一个废话节点 废话说完回到废话头 一个树里还有好几个头 ，没办法 节点直接的连接不是双向的 也就是只有上一个节点持有下一个节点 我只能让每个废话节点都要有根节点的引用……</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给你单链表的头节点  <code>head</code>  ，请你反转链表，并返回反转后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><div class=\"img-item\" data-src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" data-sub-html=\".caption\"><img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"img\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">img</span></div></div></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,3,4,5]</span><br><span class=\"line\">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<p><div class=\"img-item\" data-src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" data-sub-html=\".caption\"><img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" alt=\"img\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">img</span></div></div></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2]</span><br><span class=\"line\">输出：[2,1]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = []</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是  <code>[0, 5000]</code></li>\n<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n<p>** 进阶：** 链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n</blockquote>\n<p>? 还要递归 递归又容易爆栈又容易错  去 tm 的 递归都给爷爬  不写递归！（好好好 晚点写 晚点写）</p>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解：</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.next = next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">ReverseList</span>(<span class=\"params\">ListNode head</span>)</span> &#123;</span><br><span class=\"line\">        ListNode pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        ListNode cur = head;</span><br><span class=\"line\">        ListNode temp = <span class=\"keyword\">new</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// //只有一个头结点 这里考虑错了 应为链表可能为空</span></span><br><span class=\"line\">        <span class=\"comment\">// if(cur.next == null) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     return head;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//需要保存一个temp 记录cur.next</span></span><br><span class=\"line\">            temp = cur.next;</span><br><span class=\"line\">            cur.next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我在边界考虑的时候有点考虑多余了 忘记了 还有可能出现空链表的情况。</p>\n<p>感觉笔记得算是日记了  毕竟每天都得逼自己记！</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/",
            "url": "http://example.com/2024/04/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/",
            "title": "算法笔记-设计链表",
            "date_published": "2024-04-06T19:57:39.000Z",
            "content_html": "<h1 id=\"设计链表\"><a class=\"markdownIt-Anchor\" href=\"#设计链表\">#</a> 设计链表</h1>\n<blockquote>\n<p>前言：4 号 提交了 5 次全部失败 这里贴一下失败的尝试，设计链表非常考研程序整体的结构 一个方法出现纰漏 ，后面会出现各种问题。</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>\n<p>单链表中的节点应该具备两个属性： <code>val</code>  和  <code>next</code>  。 <code>val</code>  是当前节点的值， <code>next</code>  是指向下一个节点的指针 / 引用。</p>\n<p>如果是双向链表，则还需要属性  <code>prev</code>  以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p>\n<p>实现  <code>MyLinkedList</code>  类：</p>\n<ul>\n<li><code>MyLinkedList()</code>  初始化  <code>MyLinkedList</code>  对象。</li>\n<li><code>int get(int index)</code>  获取链表中下标为  <code>index</code>  的节点的值。如果下标无效，则返回  <code>-1</code>  。</li>\n<li><code>void addAtHead(int val)</code>  将一个值为  <code>val</code>  的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>\n<li><code>void addAtTail(int val)</code>  将一个值为  <code>val</code>  的节点追加到链表中作为链表的最后一个元素。</li>\n<li><code>void addAtIndex(int index, int val)</code>  将一个值为  <code>val</code>  的节点插入到链表中下标为  <code>index</code>  的节点之前。如果  <code>index</code>  等于链表的长度，那么该节点会被追加到链表的末尾。如果  <code>index</code>  比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li>\n<li><code>void deleteAtIndex(int index)</code>  如果下标有效，则删除链表中下标为  <code>index</code>  的节点。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入</span><br><span class=\"line\">[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]</span><br><span class=\"line\">[[], [1], [3], [1, 2], [1], [1], [1]]</span><br><span class=\"line\">输出</span><br><span class=\"line\">[null, null, null, null, 2, null, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br><span class=\"line\">MyLinkedList myLinkedList = new MyLinkedList();</span><br><span class=\"line\">myLinkedList.addAtHead(1);</span><br><span class=\"line\">myLinkedList.addAtTail(3);</span><br><span class=\"line\">myLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3</span><br><span class=\"line\">myLinkedList.get(1);              // 返回 2</span><br><span class=\"line\">myLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3</span><br><span class=\"line\">myLinkedList.get(1);              // 返回 3</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= index, val &lt;= 1000</code></li>\n<li>请不要使用内置的 LinkedList 库。</li>\n<li>调用  <code>get</code> 、 <code>addAtHead</code> 、 <code>addAtTail</code> 、 <code>addAtIndex</code>  和  <code>deleteAtIndex</code>  的次数不超过  <code>2000</code>  。</li>\n</ul>\n</blockquote>\n<h4 id=\"失败代码\"><a class=\"markdownIt-Anchor\" href=\"#失败代码\">#</a> 失败代码</h4>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyLinkedNode</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> val;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> MyLinkedNode next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyLinkedList</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//虚假头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> MyLinkedNode StartHead;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinkedList</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            StartHead = <span class=\"keyword\">new</span> MyLinkedNode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"built_in\">int</span> index</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//从头结点开始遍历</span></span><br><span class=\"line\">            MyLinkedNode curNode = StartHead.next;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (curNode != <span class=\"literal\">null</span> &amp;&amp; count &lt; index)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                curNode = curNode.next;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curNode == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 当索引超出链表长度时，返回 -1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> curNode.val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddAtHead</span>(<span class=\"params\"><span class=\"built_in\">int</span> val</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyLinkedNode addNode = <span class=\"keyword\">new</span> MyLinkedNode();</span><br><span class=\"line\">            addNode.val = val;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StartHead.next == <span class=\"literal\">null</span>)  <span class=\"comment\">//我这里好像就弄反顺序了</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                StartHead.next = addNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                addNode.next = StartHead.next.next;</span><br><span class=\"line\">                StartHead.next = addNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddAtTail</span>(<span class=\"params\"><span class=\"built_in\">int</span> val</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历找到尾部节点 从头节点开始</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StartHead.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//链表为空</span></span><br><span class=\"line\">                StartHead.next = <span class=\"keyword\">new</span> MyLinkedNode();</span><br><span class=\"line\">                StartHead.next.val = val;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            MyLinkedNode endNode = StartHead.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (endNode.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                endNode = endNode.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            endNode.next = <span class=\"keyword\">new</span> MyLinkedNode();</span><br><span class=\"line\">            endNode.next.val = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddAtIndex</span>(<span class=\"params\"><span class=\"built_in\">int</span> index, <span class=\"built_in\">int</span> val</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            MyLinkedNode addNode = <span class=\"keyword\">new</span> MyLinkedNode();</span><br><span class=\"line\">            addNode.val = val;</span><br><span class=\"line\"></span><br><span class=\"line\">            MyLinkedNode curNode = StartHead;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (curNode.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 当索引超出链表长度时，将节点添加到链表末尾</span></span><br><span class=\"line\">                    curNode.next = addNode;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                curNode = curNode.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 此时 curNode 指向插入位置的前一个节点</span></span><br><span class=\"line\">            addNode.next = curNode.next;</span><br><span class=\"line\">            curNode.next = addNode;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// MyLinkedNode addNode = new MyLinkedNode();</span></span><br><span class=\"line\">            <span class=\"comment\">// addNode.val = val;</span></span><br><span class=\"line\">            <span class=\"comment\">// MyLinkedNode curNode = StartHead.next;</span></span><br><span class=\"line\">            <span class=\"comment\">// if(curNode == null)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     //如果头结点为空 链表为空</span></span><br><span class=\"line\">            <span class=\"comment\">//     StartHead.next = addNode;</span></span><br><span class=\"line\">            <span class=\"comment\">//     return;</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// //头结点不为空</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// //前一个节点</span></span><br><span class=\"line\">            <span class=\"comment\">// MyLinkedNode lastNode = StartHead;</span></span><br><span class=\"line\">            <span class=\"comment\">// while(index &gt; 0)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     if(curNode != null &amp;&amp; lastNode != null)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         lastNode = curNode;</span></span><br><span class=\"line\">            <span class=\"comment\">//         curNode = curNode.next;</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;else if(curNode == null &amp;&amp; index == 0)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         //等于长度了</span></span><br><span class=\"line\">            <span class=\"comment\">//         lastNode.next = addNode;</span></span><br><span class=\"line\">            <span class=\"comment\">//         return;</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;else&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         return;</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//     index--;</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// //插入节点在这个节点之前</span></span><br><span class=\"line\">            <span class=\"comment\">// addNode.next = curNode;</span></span><br><span class=\"line\">            <span class=\"comment\">// lastNode.next = addNode;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DeleteAtIndex</span>(<span class=\"params\"><span class=\"built_in\">int</span> index</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            MyLinkedNode curNode = StartHead;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (curNode.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果索引超出链表长度，直接返回</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                curNode = curNode.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 此时 curNode 指向要删除节点的前一个节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curNode.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                curNode.next = curNode.next.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// MyLinkedNode curNode = StartHead.next;</span></span><br><span class=\"line\">            <span class=\"comment\">// MyLinkedNode beforeNode = StartHead.next;</span></span><br><span class=\"line\">            <span class=\"comment\">// if(curNode == null)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     return;</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// while(index &gt; 0)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//     if(curNode != null)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         beforeNode = curNode;</span></span><br><span class=\"line\">            <span class=\"comment\">//         curNode = curNode.next;</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//     else&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//         return;</span></span><br><span class=\"line\">            <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">//     index--;</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// //删除这个节点 之前的节点断开</span></span><br><span class=\"line\">            <span class=\"comment\">// beforeNode.next = curNode.next;</span></span><br><span class=\"line\">            <span class=\"comment\">// curNode = null;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\">     * MyLinkedList obj = new MyLinkedList();</span></span><br><span class=\"line\"><span class=\"comment\">     * int param_1 = obj.Get(index);</span></span><br><span class=\"line\"><span class=\"comment\">     * obj.AddAtHead(val);</span></span><br><span class=\"line\"><span class=\"comment\">     * obj.AddAtTail(val);</span></span><br><span class=\"line\"><span class=\"comment\">     * obj.AddAtIndex(index,val);</span></span><br><span class=\"line\"><span class=\"comment\">     * obj.DeleteAtIndex(index);</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br></pre></td></tr></table></figure>\n<p>好 那写之前我决定看视频先学习一下</p>\n<ol>\n<li>\n<p>获取第 n 个节点的值</p>\n<ol>\n<li>合法性判断 ： n&lt;0 且 n&gt; size-1 都是不合法的</li>\n<li>定义临时指针 cur 为 dummyHead -&gt; next；</li>\n<li>记住极端情况  获取第 0 个的情况</li>\n</ol>\n</li>\n<li>\n<p>头部插入节点</p>\n<ol>\n<li>new 一个新 Node</li>\n<li>new.next = dummy .next (注意这里的顺序 如果和 3 反了 会导致连接错误)</li>\n<li>dummy.next = new</li>\n<li>size++</li>\n</ol>\n</li>\n<li>\n<p>尾部插入节点</p>\n<ol>\n<li>cur = dummy</li>\n<li>while (cur.next != null) 为空为终止条件</li>\n<li>cur.next = newNode</li>\n</ol>\n</li>\n<li>\n<p>第 n 个节点前插入节点</p>\n<ol>\n<li>cur = dummy</li>\n<li>while (n–){ cur = cur.next} n 为 0 的时候 终止</li>\n<li>和插入一样   如下图顺序</li>\n<li>\n<div class=\"img-item\" data-src=\"/2024/04/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/image-20240407212448058.png\" data-sub-html=\".caption\"><img src=\"/2024/04/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/image-20240407212448058.png\" class=\"\" title=\"image-20240407212448058\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">image-20240407212448058</span></div></div>\n</li>\n</ol>\n</li>\n<li>\n<p>删除第 n 个节点</p>\n<ol>\n<li>cur= dummy</li>\n<li>第 n 个节点一定要是 cur.next 然后我们操作第 cur 个节点</li>\n<li>一样 while (n–) cur= cur.next  第 n 个为 cur.next</li>\n<li>cur.next = cur.next.next; 指向下下个  为 null 也不要紧  n 记得前面要防止极端条件</li>\n<li>size–</li>\n</ol>\n</li>\n</ol>\n<p>好了 船新代码:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyLinkedNode</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> val;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> MyLinkedNode next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinkedNode</span>(<span class=\"params\"><span class=\"built_in\">int</span> val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyLinkedList</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//虚假头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> MyLinkedNode StartHead;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinkedList</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            StartHead = <span class=\"keyword\">new</span> MyLinkedNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">            size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"built_in\">int</span> index</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//不合法 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span> || index &gt;size <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//从头结点开始遍历</span></span><br><span class=\"line\">            MyLinkedNode curNode = StartHead.next;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(index != <span class=\"number\">0</span>)&#123;  <span class=\"comment\">//符合index==0的情况</span></span><br><span class=\"line\">                curNode = curNode.next;</span><br><span class=\"line\">                index--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> curNode.val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddAtHead</span>(<span class=\"params\"><span class=\"built_in\">int</span> val</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyLinkedNode addNode = <span class=\"keyword\">new</span> MyLinkedNode(val);</span><br><span class=\"line\">            <span class=\"comment\">//先让新的指向 目标节点</span></span><br><span class=\"line\">            addNode.next = StartHead.next;</span><br><span class=\"line\">            StartHead.next = addNode;</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddAtTail</span>(<span class=\"params\"><span class=\"built_in\">int</span> val</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyLinkedNode addNode = <span class=\"keyword\">new</span> MyLinkedNode(val);</span><br><span class=\"line\">            <span class=\"comment\">//找到末尾节点</span></span><br><span class=\"line\">            MyLinkedNode curNode = StartHead;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(curNode.next != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                curNode = curNode.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curNode.next = addNode;</span><br><span class=\"line\">            size++;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddAtIndex</span>(<span class=\"params\"><span class=\"built_in\">int</span> index, <span class=\"built_in\">int</span> val</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//不合法 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &gt;size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//这里如果小于零 不应该返回 而是插入头结点  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            index = <span class=\"number\">0</span>;   </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//找到第n个节点</span></span><br><span class=\"line\">            MyLinkedNode addNode = <span class=\"keyword\">new</span> MyLinkedNode(val);</span><br><span class=\"line\">            MyLinkedNode curNode = StartHead;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(index != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                curNode = curNode.next;</span><br><span class=\"line\">                index--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            addNode.next = curNode.next; <span class=\"comment\">//添加的节点的下一个指向n个节点</span></span><br><span class=\"line\">            curNode.next = addNode;</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DeleteAtIndex</span>(<span class=\"params\"><span class=\"built_in\">int</span> index</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//不合法 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span> || index &gt;size <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            MyLinkedNode curNode = StartHead;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(index != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                curNode = curNode.next;</span><br><span class=\"line\">                index--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curNode.next = curNode.next.next;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\">     * MyLinkedList obj = new MyLinkedList();</span></span><br><span class=\"line\"><span class=\"comment\">     * int param_1 = obj.Get(index);</span></span><br><span class=\"line\"><span class=\"comment\">     * obj.AddAtHead(val);</span></span><br><span class=\"line\"><span class=\"comment\">     * obj.AddAtTail(val);</span></span><br><span class=\"line\"><span class=\"comment\">     * obj.AddAtIndex(index,val);</span></span><br><span class=\"line\"><span class=\"comment\">     * obj.DeleteAtIndex(index);</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br></pre></td></tr></table></figure>\n<p>要注意几个点 一个是 插入的时候 按照需求  index&lt;0  并不是不合法 而是 直接插入头结点 。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/",
            "url": "http://example.com/2024/04/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/",
            "title": "算法笔记-移除链表元素",
            "date_published": "2024-04-06T12:03:35.000Z",
            "content_html": "<h1 id=\"移除链表元素\"><a class=\"markdownIt-Anchor\" href=\"#移除链表元素\">#</a> 移除链表元素</h1>\n<blockquote>\n<p>前言： 这题在 4 天前 差不多 4 月 2 日我写了一次 所以相对更加熟悉了一些。画了两百个馒头进算法训练营，发现用 C# 的小伙伴真的好少啊，突然开始觉得自己又花冤枉钱了。而且同时要肝项目 还要刷算法 还想打游戏真的好难啊。项目上又遇到难关了。本来应该抽离出来的数据 一开始没考虑好抽离。现在复制黏贴功能不好弄咯。 下次不能犯这种错误了。</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给你一个链表的头节点  <code>head</code>  和一个整数  <code>val</code>  ，请你删除链表中所有满足  <code>Node.val == val</code>  的节点，并返回 <strong>新的头节点</strong> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><div class=\"img-item\" data-src=\"https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg\" data-sub-html=\".caption\"><img src=\"https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg\" alt=\"img\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">img</span></div></div></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class=\"line\">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [], val = 1</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [7,7,7,7], val = 7</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li>列表中的节点数目在范围  <code>[0, 104]</code>  内</li>\n<li><code>1 &lt;= Node.val &lt;= 50</code></li>\n<li><code>0 &lt;= val &lt;= 50</code></li>\n</ul>\n</blockquote>\n<p>在两天前 我是没设定一个虚假的头结点的</p>\n<h2 id=\"题解1\"><a class=\"markdownIt-Anchor\" href=\"#题解1\">#</a> 题解 1</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.next = next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">RemoveElements</span>(<span class=\"params\">ListNode head, <span class=\"built_in\">int</span> val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//移除头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( head!=<span class=\"literal\">null</span> &amp;&amp; head.val == val)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//新的头结点向后移动</span></span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode curNode;</span><br><span class=\"line\">        ListNode preNode; <span class=\"comment\">//上一个节点</span></span><br><span class=\"line\">        preNode = head;</span><br><span class=\"line\">        curNode = head.next; </span><br><span class=\"line\">        <span class=\"comment\">//非头节点 如果下一个节点不为空(不是末尾节点) 且当前节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(curNode != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(curNode.val == val)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//上一个节点指向当前节点的下一个</span></span><br><span class=\"line\">            preNode.next = curNode.next;</span><br><span class=\"line\">            curNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                preNode = preNode.next;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           curNode = preNode.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后 今天这个是设立了虚假头结点的</p>\n<h2 id=\"题解2\"><a class=\"markdownIt-Anchor\" href=\"#题解2\">#</a> 题解 2</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public ListNode(int val=0, ListNode next=null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.next = next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">RemoveElements</span>(<span class=\"params\">ListNode head, <span class=\"built_in\">int</span> val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个虚拟头结点 StartNode.next 为头结点</span></span><br><span class=\"line\">        ListNode StartNode = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">        ListNode curNode = head;</span><br><span class=\"line\">        ListNode LastNode = StartNode;</span><br><span class=\"line\">        StartNode.next = head;</span><br><span class=\"line\">        <span class=\"comment\">//如果移除的是头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head != <span class=\"literal\">null</span> &amp;&amp; head.val == val)&#123;</span><br><span class=\"line\">            StartNode.next = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StartNode.next == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> StartNode.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(curNode != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(curNode.val == val)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LastNode.next = curNode.next;</span><br><span class=\"line\">                curNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LastNode = LastNode.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//这里关键要注意一下 当前节点始终在前一个节点的下一个</span></span><br><span class=\"line\">            curNode = LastNode.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StartNode.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯</p>\n<p>所以说 上一个节点 是命名为  <code>preNode</code>  好 还是  <code>lastNode</code>  好呢</p>\n<p>好纠结</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/",
            "url": "http://example.com/2024/04/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/",
            "title": "算法笔记-螺旋矩阵",
            "date_published": "2024-04-05T18:53:19.000Z",
            "content_html": "<h1 id=\"螺旋矩阵\"><a class=\"markdownIt-Anchor\" href=\"#螺旋矩阵\">#</a> 螺旋矩阵</h1>\n<blockquote>\n<p>前言 ： 果然这题目又告诉我，你的逻辑推理能力太差了，我自己写的时候，转圈真给自己转进去了，哎。</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给你一个正整数  <code>n</code>  ，生成一个包含  <code>1</code>  到  <code>n2</code>  所有元素，且元素按顺时针顺序螺旋排列的  <code>n x n</code>  正方形矩阵  <code>matrix</code>  。</p>\n<p><strong>示例 1：</strong></p>\n<p><div class=\"img-item\" data-src=\"https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg\" data-sub-html=\".caption\"><img src=\"https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg\" alt=\"img\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">img</span></div></div></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 3</span><br><span class=\"line\">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：n = 1</span><br><span class=\"line\">输出：[[1]]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 20</code></li>\n</ul>\n</blockquote>\n<p>这题主要在于模拟过程，知道应该要左闭右开 每个节点末尾留给下一次循环遍历来处理就好。然后难点就在要注意每转一圈之后 都有一个 + 1 的偏移量 和 奇偶数 最后的处理了</p>\n<div class=\"img-item\" data-src=\"/2024/04/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/image-20240406030020682.png\" data-sub-html=\".caption\"><img src=\"/2024/04/06/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/image-20240406030020682.png\" class=\"\" title=\"image-20240406030020682\"></div>\n<p>这里画一个偶数的情况</p>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span>[][] GenerateMatrix(<span class=\"built_in\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//生成从1 到 n2的数组</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> n2 = n * n;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[][] result = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[n][];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> a= <span class=\"number\">0</span>;a&lt;n;a++)&#123;</span><br><span class=\"line\">            result[a] = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[n];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> startx = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> starty = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> offset = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这个螺旋矩阵是n*n的 第一圈是[0,n)</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> loop = n/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> mid = n/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> i,j;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(loop &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            j = startx;</span><br><span class=\"line\">            i = starty;</span><br><span class=\"line\">            <span class=\"comment\">// 第一条边左闭右开填充</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i =starty;i&lt; n-offset;i++)&#123;</span><br><span class=\"line\">                result[startx][i] = count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 第二条边</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j= startx;j &lt; n- offset;j++)&#123;</span><br><span class=\"line\">                result[j][i] = count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//第三条边</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;i&gt;starty;i--)&#123;</span><br><span class=\"line\">                result[j][i] = count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//第四条边</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;j&gt;startx;j--)&#123;</span><br><span class=\"line\">                result[j][i] = count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            startx++;</span><br><span class=\"line\">            starty++;</span><br><span class=\"line\">            offset++;</span><br><span class=\"line\">            loop--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//最后处理奇数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            result[mid][mid] = count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结一下</p>\n<p>这种模拟过程 对于一些 在游戏逻辑中 就比如转圈圈放东西 这种逻辑来说还是非常有必要的。 实际情况可能就是一个 List 然后要在一个二维数组里 比如地图网格 螺旋放物品。 这种情况 也许 可能会出现。 如果出现 那我就愉快的用这个来写了。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/",
            "url": "http://example.com/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/",
            "title": "算法笔记-长度最小的子数组",
            "date_published": "2024-04-05T07:32:53.000Z",
            "content_html": "<h1 id=\"长度最小的子数组\"><a class=\"markdownIt-Anchor\" href=\"#长度最小的子数组\">#</a> 长度最小的子数组</h1>\n<blockquote>\n<p>前言：这题也算是中等题目 我次次做次次错 ，我自然是知道自己的坏习惯的 每次隔个几个月就暗暗下定决心刷算法。然后每次都是从一开始写就感到挫折。一道题写半天还是错啊，一道题想一天还是没思路啊 巴拉巴拉。不知不觉 大部分业务都能写了，结果算法还是一窍不通。自感悲哀</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给定一个含有  <code>n</code>  个正整数的数组和一个正整数  <code>target</code>  <strong>。</strong></p>\n<p>找出该数组中满足其总和大于等于  <code>target</code>  的长度最小的 <strong>连续</strong></p>\n<p><strong>子数组</strong></p>\n<p><code>[numsl, numsl+1, ..., numsr-1, numsr]</code>  ，并返回其长度 **。** 如果不存在符合条件的子数组，返回  <code>0</code>  。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 4, nums = [1,4,4]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= target &lt;= 109</code></li>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<p><strong>进阶：</strong></p>\n<ul>\n<li>如果你已经实现  <code>O(n)</code>  时间复杂度的解法，请尝试设计一个  <code>O(n log(n))</code>  时间复杂度的解法。</li>\n</ul>\n</blockquote>\n<p>解法 1 暴力解法：</p>\n<p>我的解答：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">MinSubArrayLen</span>(<span class=\"params\"><span class=\"built_in\">int</span> target, <span class=\"built_in\">int</span>[] nums</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> result = <span class=\"built_in\">int</span>.MaxValue;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> i =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i= <span class=\"number\">0</span>;i&lt;nums.Length;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> j = i; j&lt;nums.Length;j++)&#123;</span><br><span class=\"line\">                sum += nums[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sum &gt;= target)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((j - i)+<span class=\"number\">1</span> &lt;= result)</span><br><span class=\"line\">                    result = (j - i)+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result == <span class=\"built_in\">int</span>.MaxValue? <span class=\"number\">0</span> : result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为力扣已经不让用这种方法去解答了 会超时</p>\n<p>但这样写应该是能符合需求的</p>\n<p>标准答案 C++ 的暴力循环</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(<span class=\"type\">int</span> s, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> result = INT32_MAX; <span class=\"comment\">// 最终的结果</span></span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">// 子序列的数值之和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> subLength = <span class=\"number\">0</span>; <span class=\"comment\">// 子序列的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) &#123; <span class=\"comment\">// 设置子序列起点为i</span></span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; nums.<span class=\"built_in\">size</span>(); j++) &#123; <span class=\"comment\">// 设置子序列终止位置为j</span></span><br><span class=\"line\">                sum += nums[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sum &gt;= s) &#123; <span class=\"comment\">// 一旦发现子序列和超过了s，更新result</span></span><br><span class=\"line\">                    subLength = j - i + <span class=\"number\">1</span>; <span class=\"comment\">// 取子序列的长度</span></span><br><span class=\"line\">                    result = result &lt; subLength ? result : subLength;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>; <span class=\"comment\">// 因为我们是找符合条件最短的子序列，所以一旦符合条件就break</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result == INT32_MAX ? <span class=\"number\">0</span> : result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>答案的写法 可读性和性能肯定比我的好</p>\n<p>好了 上面都是没啥用的 因为这题要用滑动窗口去写</p>\n<p>示例图：</p>\n<div class=\"img-item\" data-src=\"/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif\" data-sub-html=\".caption\"><img src=\"/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif\" class=\"\" title=\"209.长度最小的子数组\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">209.长度最小的子数组</span></div></div>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">MinSubArrayLen</span>(<span class=\"params\"><span class=\"built_in\">int</span> target, <span class=\"built_in\">int</span>[] nums</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; <span class=\"comment\">//滑动窗口起始位置</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> j = <span class=\"number\">0</span>; <span class=\"comment\">//滑动窗口终止位置  这里注意 j是循环完一次数组的</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> subSize = <span class=\"number\">0</span>; <span class=\"comment\">//窗口长度</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> result = <span class=\"built_in\">int</span>.MaxValue; <span class=\"comment\">//依旧是结果从最大值取起</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> sum = <span class=\"number\">0</span>; <span class=\"comment\">//总和 这里注意不要放内部计算 在循环内部会加加减减</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;nums.Length;j++)&#123;</span><br><span class=\"line\">            sum += nums[j];</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(sum &gt;= target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//计算窗口长度</span></span><br><span class=\"line\">                subSize = j-i+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//判断一下结果与窗口长度 如果结果小于窗口 不赋值 为最大值 </span></span><br><span class=\"line\">                result = result &lt; subSize? result :subSize;</span><br><span class=\"line\">                sum -= nums[i];</span><br><span class=\"line\">                <span class=\"comment\">//起始位置前移</span></span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result == <span class=\"built_in\">int</span>.MaxValue? <span class=\"number\">0</span>:result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里说一个可笑的小插曲</p>\n<p>我注意一下如果换成  <code>result = result &lt; subSize? result :subSize;</code>  这句 其实一样 但我写题的时候纠结很久  因为我当时纠结的地方错了  我以外如果判断顺序反了 比如写成 result = subSize&lt; result ? subSize :result ; 我想 result 就不可能为 int.MaxValue 那如何有让 result 保持初始值的情况呢。其实是我忽略了 while 中的判断条件 如果 while 根本不进入 那 result 就会一直保持初始值。这里只是我想错了导致的无意义纠结。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%B9%B3%E6%96%B9/",
            "url": "http://example.com/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%B9%B3%E6%96%B9/",
            "title": "算法笔记-有序数组平方",
            "date_published": "2024-04-05T06:24:42.000Z",
            "content_html": "<h1 id=\"有序数组的平方\"><a class=\"markdownIt-Anchor\" href=\"#有序数组的平方\">#</a> 有序数组的平方</h1>\n<blockquote>\n<p>前言 ： 这题算是第二次写了 记的还是比较清楚的 第一次写肯定想着暴力写法 先平方再排序 后面想明白了就知道 从两边开始比较  因为这个数组是<strong>有序的</strong> 大的一定在两边 所以新的数组从两边开始</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组  <code>nums</code> ，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [-4,-1,0,3,10]</span><br><span class=\"line\">输出：[0,1,9,16,100]</span><br><span class=\"line\">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class=\"line\">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [-7,-3,2,3,11]</span><br><span class=\"line\">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n<li><code>nums</code>  已按 <strong>非递减顺序</strong> 排序</li>\n</ul>\n</blockquote>\n<h2 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\">#</a> 题解</h2>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span>[] <span class=\"title\">SortedSquares</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//从两头开始 </span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> right = nums.Length<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[nums.Length];</span><br><span class=\"line\">        <span class=\"built_in\">int</span> size = nums.Length<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当左指针不再小于右指针的时候 不再循环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(size &gt;= <span class=\"number\">0</span>)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//如果左平方大于右平方</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left]*nums[left] &gt; nums[right] * nums[right])&#123;</span><br><span class=\"line\">                result[size] = nums[left] * nums[left];</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                result[size] = nums[right] * nums[right];</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里叭叭一下 我写题的心路历程吧 因为是写过的 所以知道从两头开始算 但奈何还是犯傻了 size 居然从 0 开始  因为两边必然有一方是最大的 所以 肯定啊 新数组从右边开始填充就是错的啊 结果会变成 直接平方的顺序啦。</p>\n<p>这里我感觉还能优化一下空间复杂度 不需要有一个新的数组 直接覆盖试试</p>\n<p>好嘞 虽然时间不够 但试试看</p>\n<p>（你要时间多也不会花小半天弄没用的博客。。。工作还做不做了？）</p>\n<p>（QwQ 我是真把自己当黑奴了啊）</p>\n<p>然后就有了下面的想法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span>[] <span class=\"title\">SortedSquares</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//从两头开始 </span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> right = nums.Length<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// int[] result = new int[nums.Length];</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> size = nums.Length<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当左指针不再小于右指针的时候 不再循环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(size &gt;= <span class=\"number\">0</span>)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//如果左平方大于右平方 这时候右边会被覆盖</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left]*nums[left] &gt; nums[right] * nums[right])&#123;</span><br><span class=\"line\">                nums[size] = nums[left] * nums[left];</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">                nums[size] = nums[right] * nums[right];</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//右边大于左边 这时候不会被覆盖</span></span><br><span class=\"line\">                nums[size] = nums[right] * nums[right];</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很好  very good</p>\n<div class=\"img-item\" data-src=\"/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%B9%B3%E6%96%B9/image-20240405143814891.png\" data-sub-html=\".caption\"><img src=\"/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%B9%B3%E6%96%B9/image-20240405143814891.png\" class=\"\" title=\"image-20240405143814891\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">image-20240405143814891</span></div></div>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/",
            "url": "http://example.com/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/",
            "title": "算法笔记-移除元素",
            "date_published": "2024-04-04T18:47:56.000Z",
            "content_html": "<h1 id=\"移除元素\"><a class=\"markdownIt-Anchor\" href=\"#移除元素\">#</a> 移除元素</h1>\n<blockquote>\n<p>前言： 简单题暴打我 3 年后归来还是被直接 KO 我还真是算法白痴 有人愿意花 3 小时学算法 但我宁愿花三小时玩博客 真是丢西瓜。。。</p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目：</h3>\n<blockquote>\n<p>给你一个数组  <code>nums</code>  和一个值  <code>val</code> ，你需要 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong> 移除所有数值等于  <code>val</code>  的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用  <code>O(1)</code>  额外空间并 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地 </a>修改输入数组</strong>。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p><strong>说明:</strong></p>\n<p>为什么返回数值是整数，但输出的答案是数组呢？</p>\n<p>请注意，输入数组是以 **「引用」** 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n<p>你可以想象内部操作如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class=\"line\">int len = removeElement(nums, val);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class=\"line\">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class=\"line\">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    print(nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,2,2,3], val = 3</span><br><span class=\"line\">输出：2, nums = [2,2]</span><br><span class=\"line\">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class=\"line\">输出：5, nums = [0,1,3,0,4]</span><br><span class=\"line\">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= nums.length &lt;= 100</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n<li><code>0 &lt;= val &lt;= 100</code></li>\n</ul>\n</blockquote>\n<h3 id=\"题解过程\"><a class=\"markdownIt-Anchor\" href=\"#题解过程\">#</a> 题解过程</h3>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">RemoveElement</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums, <span class=\"built_in\">int</span> val</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这是两次遍历的暴力解法 </span></span><br><span class=\"line\">        <span class=\"comment\">// int size = nums.Length;</span></span><br><span class=\"line\">        <span class=\"comment\">// for(int i = 0;i&lt;size;i++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     if(nums[i] == val)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         //后面都往前移动</span></span><br><span class=\"line\">        <span class=\"comment\">//         for(int j = i+1;j&lt;size;j++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//             nums[j-1] = nums[j];</span></span><br><span class=\"line\">        <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//         i--;  //我失败就失败在又漏了i-- 数组变化了 你i不变化？ </span></span><br><span class=\"line\">        <span class=\"comment\">//         size--; </span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// return size;</span></span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">//快慢指针法 这里是答案写法 我写的烂透了 这里写的真精简啊..</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> slowPoint = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> fastPoint=<span class=\"number\">0</span>;fastPoint&lt;nums.Length;fastPoint++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[fastPoint] != val)&#123;</span><br><span class=\"line\">                nums[slowPoint++] = nums[fastPoint];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> slowPoint;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a class=\"markdownIt-Anchor\" href=\"#解析\">#</a> 解析</h2>\n<p>简单的说 就是 数组是不能删掉的  数组内的元素都是覆盖的 大概内部有个计数器用来标记长度 加加减减</p>\n<h3 id=\"快慢指针法\"><a class=\"markdownIt-Anchor\" href=\"#快慢指针法\">#</a> 快慢指针法</h3>\n<blockquote>\n<p>快慢指针通常用来解决这些问题：</p>\n<ol>\n<li>判断链表是否有环：快指针以比慢指针更快的速度遍历链表，如果链表中有环，快指针最终会追上慢指针，从而发现环的存在。</li>\n<li>寻找链表的中间节点：慢指针每次移动一步，快指针每次移动两步，当快指针到达链表末尾时，慢指针指向的节点即为中间节点。</li>\n</ol>\n</blockquote>\n<p>也许能在实践中用到？  但 <code>LinkList</code>  这种结构都使用极少……</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "http://example.com/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "算法笔记-二分查找",
            "date_published": "2024-04-04T17:05:28.000Z",
            "content_html": "<h1 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\">#</a> 二分查找</h1>\n<p>前言：这道题  真的可是说我做了很多遍 就仿佛如英语的 abandon 仿佛如恶魔的低语一般伴随着我不会算法的日子。</p>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h3>\n<blockquote>\n<p>给定一个  <code>n</code>  个元素有序的（升序）整型数组  <code>nums</code>  和一个目标值  <code>target</code>  ，写一个函数搜索  <code>nums</code>  中的  <code>target</code> ，如果目标值存在返回下标，否则返回  <code>-1</code> 。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class=\"line\">输出: -1</span><br><span class=\"line\">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong></p>\n<ol>\n<li>你可以假设  <code>nums</code>  中的所有元素是不重复的。</li>\n<li><code>n</code>  将在  <code>[1, 10000]</code>  之间。</li>\n<li><code>nums</code>  的每个元素都将在  <code>[-9999, 9999]</code>  之间</li>\n</ol>\n</blockquote>\n<p>二分又叫分治法 主要要点在于分而治之</p>\n<p><strong>关键在于分治时候的区间范围取值</strong></p>\n<p>版本一 左闭右闭版本</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Search</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums, <span class=\"built_in\">int</span> target</span>)</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义区间范围为 [left,right] </span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> right = nums.Length <span class=\"number\">-1</span>; </span><br><span class=\"line\">        <span class=\"built_in\">int</span> left = <span class=\"number\">0</span>;   </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right)&#123; <span class=\"comment\">//因为是闭合区间 才能取到等号</span></span><br><span class=\"line\">            <span class=\"comment\">//这里做减法 防止溢出</span></span><br><span class=\"line\">            <span class=\"built_in\">int</span> middle = left + (-left + right) /<span class=\"number\">2</span>; </span><br><span class=\"line\">            <span class=\"comment\">//目标一定在左边 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[middle] &gt; target) </span><br><span class=\"line\">            &#123; <span class=\"comment\">//范围变成左闭右闭 [left,middle-1]</span></span><br><span class=\"line\">                right = middle <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//目标在右边</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle] &lt; target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//范围变成 [middle+1,right]</span></span><br><span class=\"line\">                left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>版本二 左闭右开</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Search</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums, <span class=\"built_in\">int</span> target</span>)</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义区间范围为 [left,right)</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> right = nums.Length; </span><br><span class=\"line\">        <span class=\"built_in\">int</span> left = <span class=\"number\">0</span>;   </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right)&#123; <span class=\"comment\">//因为不是闭合区间 不取等号了</span></span><br><span class=\"line\">            <span class=\"comment\">//这里做减法 防止溢出</span></span><br><span class=\"line\">            <span class=\"comment\">//高级写法 &gt;&gt; 运算符是右移位运算符 它将 right - left 的结果右移一位，相当于将其除以2 逆天写法 平常感觉用不太到 学不太来</span></span><br><span class=\"line\">             <span class=\"built_in\">int</span> middle = left + ((right - left) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">//目标一定在左边 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[middle] &gt; target) </span><br><span class=\"line\">            &#123; <span class=\"comment\">//不是上版的 middle-1了 范围变成左闭右闭 [left,middle)</span></span><br><span class=\"line\">                right = middle;  </span><br><span class=\"line\">            <span class=\"comment\">//目标在右边</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle] &lt; target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//范围变成 [middle+1,right)</span></span><br><span class=\"line\">                left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//无目标值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"运用分析\"><a class=\"markdownIt-Anchor\" href=\"#运用分析\">#</a> 运用分析</h1>\n<p>二分查找我认为是学习 循环中判断与开闭区间关系的一道好题目</p>\n<p>实际项目中没有用到过</p>\n<p>叭叭两句  <code>&gt;&gt;</code>  这个玩意 GPT 告送我 大多数情况 替换 /2 是安全的 但真的会有人这样用吗 这样可读性就下降了 可能性能有微小的提升吧 注意的是 右移运算不会出现小数</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> c = <span class=\"number\">-5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用右移位运算符</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> result1 = c &gt;&gt; <span class=\"number\">1</span>;  <span class=\"comment\">// 结果为 -3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用除法</span></span><br><span class=\"line\"><span class=\"built_in\">int</span> result2 = c / <span class=\"number\">2</span>;   <span class=\"comment\">// 结果为 -2</span></span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">&quot;结果1: &quot;</span> + result1);  <span class=\"comment\">// 输出-3</span></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">&quot;结果2: &quot;</span> + result2);  <span class=\"comment\">// 输出-2</span></span><br></pre></td></tr></table></figure>\n<p>运行一下 不一样  感觉有点危险 能少用还是少用吧</p>\n<div class=\"img-item\" data-src=\"/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20240405014738787.png\" data-sub-html=\".caption\"><img src=\"/2024/04/05/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20240405014738787.png\" class=\"\" title=\"image-20240405014738787\"><div class=\"img-caption d-block text-center\"><span class=\"center-caption text-muted border-bottom\">image-20240405014738787</span></div></div>\n<p>我写好多次 每次写二分还是废 所白了 就是记不住 写这篇文章 就是要逼我 强行记住</p>\n",
            "tags": [
                "算法"
            ]
        }
    ]
}